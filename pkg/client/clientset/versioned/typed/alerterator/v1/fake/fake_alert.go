// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	alerteratorv1 "github.com/nais/alerterator/pkg/apis/alerterator/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeAlerts implements AlertInterface
type FakeAlerts struct {
	Fake *FakeAlerteratorV1
}

var alertsResource = schema.GroupVersionResource{Group: "alerterator.nais.io", Version: "v1", Resource: "alerts"}

var alertsKind = schema.GroupVersionKind{Group: "alerterator.nais.io", Version: "v1", Kind: "Alert"}

// Get takes name of the alert, and returns the corresponding alert object, and an error if there is any.
func (c *FakeAlerts) Get(name string, options v1.GetOptions) (result *alerteratorv1.Alert, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(alertsResource, name), &alerteratorv1.Alert{})
	if obj == nil {
		return nil, err
	}
	return obj.(*alerteratorv1.Alert), err
}

// List takes label and field selectors, and returns the list of Alerts that match those selectors.
func (c *FakeAlerts) List(opts v1.ListOptions) (result *alerteratorv1.AlertList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(alertsResource, alertsKind, opts), &alerteratorv1.AlertList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &alerteratorv1.AlertList{ListMeta: obj.(*alerteratorv1.AlertList).ListMeta}
	for _, item := range obj.(*alerteratorv1.AlertList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested alerts.
func (c *FakeAlerts) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(alertsResource, opts))
}

// Create takes the representation of a alert and creates it.  Returns the server's representation of the alert, and an error, if there is any.
func (c *FakeAlerts) Create(alert *alerteratorv1.Alert) (result *alerteratorv1.Alert, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(alertsResource, alert), &alerteratorv1.Alert{})
	if obj == nil {
		return nil, err
	}
	return obj.(*alerteratorv1.Alert), err
}

// Update takes the representation of a alert and updates it. Returns the server's representation of the alert, and an error, if there is any.
func (c *FakeAlerts) Update(alert *alerteratorv1.Alert) (result *alerteratorv1.Alert, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(alertsResource, alert), &alerteratorv1.Alert{})
	if obj == nil {
		return nil, err
	}
	return obj.(*alerteratorv1.Alert), err
}

// Delete takes name of the alert and deletes it. Returns an error if one occurs.
func (c *FakeAlerts) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(alertsResource, name), &alerteratorv1.Alert{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeAlerts) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(alertsResource, listOptions)

	_, err := c.Fake.Invokes(action, &alerteratorv1.AlertList{})
	return err
}

// Patch applies the patch and returns the patched alert.
func (c *FakeAlerts) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *alerteratorv1.Alert, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(alertsResource, name, pt, data, subresources...), &alerteratorv1.Alert{})
	if obj == nil {
		return nil, err
	}
	return obj.(*alerteratorv1.Alert), err
}
